<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ output extension=".txt" #>
<#@ include file="$(ProjectDir)_DMSC\MultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)_DMSC\GetDBMsg.ttinclude"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>

<#
    string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)"); //获取当前解决方案路径
    string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)"); //获取当前项目路径

	//连接字符串 _DMSC/appsettings.json配置连接字符串
    DbHelper.ConnString=Regex.Match(File.ReadAllText(projectDir + "_DMSC/appsettings.json"), "(?<=\"ConnString\"\\s*:\\s*\")[^\"]+(?=\")").Value;
    List<Table> list=DMSC.Main();  //获取表集合
	var manager = Manager.Create(Host, GenerationEnvironment);
	foreach(Table table in list){
		string dire=projectDir+"_CacheFile/";
        string path=dire+table.Name+"_insert.js";
		if (!Directory.Exists(dire)) { Directory.CreateDirectory(dire); }
        if(File.Exists(path)){File.Delete(path);}
		manager.StartNewFile(path);  //必须放在输出的字符串之前
#>
import React, { useEffect, useRef } from 'react';
import axios from 'axios'
import $ from 'jquery'
import { useStates } from '../../common'


export default function ({ close }) {
    let [state, setState] = useStates({
        //定义状态
        
    })

    let form = useRef();

    //页面加载
    useEffect(() => {


    }, []);

    //提交
    function submit() {
        var param = {};
        for (var m of $(form.current).serializeArray()) {
            param[m.name] = m.value;
        }
        axios.post("/api/<#=table.Name#>/insert", param).then(msg => {
            $.alert('操作成功');
            close();
        });
    }

    return (
        <div className="box box-move fixed-center" style={{ width: '800px', height: '500px' }}>
            <div className="box-head box-move-switch flex">
                <div className="flex-1">新建</div>
                <i className="icon-remove" onClick={() => close()}></i>
            </div>
            <div className="box-body">
                <form ref={form}>
                    <div className="form-row">
<#        foreach(Column column in table.Column){ #>
<#        if(column.CType=="bool?"){#>
                        <label className="form-item">
                            <span><#=column.Description#></span>
                            <input type="checkbox" name="<#=column.Name#>" value="true" />
                        </label>
<#        }else{#>
                        <label className="form-item">
                            <span><#=column.Description#></span>
                            <input type="text" className="input-text" name="<#=column.Name#>" />
                        </label>
<#        }}#>
                        
                    </div>
                </form>
            </div>
            <div className="box-foot">
                <input type="button" className="btn-primary mlr-10" value="确定" onClick={() => submit()} />
                <input type="button" className="btn-default mlr-10" value="取消" onClick={() => close()} />
            </div>
        </div>
    );
}

<#
manager.EndBlock();  //结束输出文件
//--------------------------生成开发文件--结束--------------------------
	}
	manager.Process(true,false);   //执行编译
#>