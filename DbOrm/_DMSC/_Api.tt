<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ output extension=".txt" #>
<#@ include file="$(ProjectDir)_DMSC\MultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)_DMSC\GetDBMsg.ttinclude"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>

<#
    string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)"); //获取当前解决方案路径
    string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)"); //获取当前项目路径

	//连接字符串 _DMSC/appsettings.json配置连接字符串
    DbHelper.ConnString=Regex.Match(File.ReadAllText(projectDir + "_DMSC/appsettings.json"), "(?<=\"ConnString\"\\s*:\\s*\")[^\"]+(?=\")").Value;
    List<Table> list=DMSC.Main();  //获取表集合
	var manager = Manager.Create(Host, GenerationEnvironment);
	foreach(Table table in list){
		string dire=projectDir+"_CacheFile/";
        string path=dire+table.Name+"Controller.cs";
		if (!Directory.Exists(dire)) { Directory.CreateDirectory(dire); }
        if(File.Exists(path)){File.Delete(path);}
		manager.StartNewFile(path);  //必须放在输出的字符串之前
#>
using DbOrm;
using DbOrm.Model;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace UI.Controllers.Api
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    [JWTAuthorize]
    public class <#=table.Name#>Controller : ControllerBase
    {
        [HttpPost]
        public Result Insert(<#=table.Name#> param)
        {
            DB.Inserts(param);
            return Result.OK();
        }

        [HttpPost]
        public Result Delete(List<int> param)
        {
            using (DB db = new DB())
            {
                db.BeginTransaction();
                try
                {
                    foreach (var m in param)
                    {
                        db.Delete<<#=table.Name#>>("ID=@ID", new { ID = m });
                    }
                    db.CommitTransaction();
                }
                catch { db.RollbackTransaction(); throw; }
            }
            return Result.OK();
        }

        [HttpPost]
        public Result Update(<#=table.Name#> param)
        {
            DB.Updates(param, "ID=@ID", new { ID = param.ID });
            return Result.OK();
        }

        [HttpPost]
        public Result Select(dynamic param)
        {
            using (DB db = new DB())
            {
                var sql = db.Select<<#=table.Name#>>("count(*)");
                //构造条件，注意参数赋值要转类型
                //if (param.MainName != "" && param.MainName != null) { sql.WhereAnd("MainName like @MainName", new { MainName = '%' + param.MainName.ToString() + '%' }); }

                //表连接查询
                //sql.LeftJoin<Test_Type>("<#=table.Name#>.Test_Type_ID=Test_Type.ID");
                //查询总数据量
                int total = (int)sql.QueryScalar();
                //设置查询列
                sql.Select("<#=table.Name#>.*");
                //排序
                sql.OrderBy("<#=table.Name#>.ID desc");
                //分页
                return Result.OK(new { total = total, list = sql.Query(((int)param.pageIndex - 1) * (int)param.pageSize, (int)param.pageSize) });
            }
        }
    }
}

<#
manager.EndBlock();  //结束输出文件
//--------------------------生成开发文件--结束--------------------------
	}
	manager.Process(true,false);   //执行编译
#>