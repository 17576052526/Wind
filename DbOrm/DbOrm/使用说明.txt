//DbOrm 是一个实体映射框架
//设置连接字符串，只需设置一次，一般是程序启动的时候设置
DB.ConnString = "Data Source=.;Initial Catalog=Wind;uid=sa;pwd=As123456789";
//语法：
//新增
DB.Insert(new Test_Main() { ID = 1, MainName = "标题" });
//批量新增
List<Test_Main> list = new List<Test_Main>();
list.Add(new Test_Main() { ID = 1, MainName = "标题1" });
list.Add(new Test_Main() { ID = 2, MainName = "标题2" });
list.Add(new Test_Main() { ID = 3, MainName = "标题3" });
DB.Insert(list);
//修改
DB.Update(new Test_Main() { MainName = "被修改的字段" }, "ID=@ID", new { ID = 22 });
//删除
DB.Delete<Test_Main>("ID=@ID", new { ID = 22 });
//单表查询
List<Test_Main> list1 = DB.Select<Test_Main>().Query();
//单表查询，查询单条数据
Test_Main model = DB.Select<Test_Main>().Where("ID=@ID").QueryFirstRow(new { ID = 22 });
//查询第一行第一列
int count = DB.Select<Test_Main>("count(*)").QueryScalar<int>();
//分页查询
List<Test_Main> list2 = DB.Select<Test_Main>().Query(10, 15);//跳过前面10条，返回剩余的15条
//多表联查
List<Test_Main> list3 = DB.Select<Test_Main>("ID,MainName,TypeName")//ID,MainName是 Test_Main表的字段，TypeName 是Test_Type表的字段
    .LeftJoin<Test_Type>("Test_Main.Test_Type_ID=Test_Type.ID")
    .Where("MainName like @MainName")
    .OrderBy("ID desc")//排序
    .Query(10, 15, new { MainName = "%标题%" });//跳过前10条，返回剩余的15条，第三个参数是条件的参数
//读取数据
Test_Main m = list3[0];
string MainName = m.MainName;
int? ID = m.ID;
Test_Type type = m.Type;//获取关联表 Test_Type的数据
//返回受影响的行
int count1 = DB.ExecuteNonQuery("insert into Test_Main(ID,MainName) values(@ID,@MainName)", new { ID = 1, MainName = "aa" });
//返回第一行第一列
int count2 = DB.ExecuteScalar<int>("select count(*) from Test_Main");
//查询
List<Test_Main> list4 = DB.Query<Test_Main>("select * from Test_Main where MainName=@MainName", new { MainName = "aa" });
//多表联查
List<Test_Main> list5 = DB.Query<Test_Main, Test_Type>("select * from Test_Main left join Test_Type on Test_Main.Test_Type_ID=Test_Type.ID");
//用动态类型
List<dynamic> list0 = DB.Query("select * from Test_Main");
string MainName1 = list0[0].MainName;
//查询数据放入缓存，再次查找时查找缓存数据
QueryCache()，QueryScalarCache()，QueryFirstRowCache() 对应Query(),QueryScalar(),QueryFirstRow()
调用方式：List<Test_Main> list2 = DB.Select<Test_Main>().QueryCache();
//调用存储过程，用 exec调用
List<Test_Main> list6 = DB.Query<Test_Main>("exec SelectTest_Main @MainName", new { MainName = "aa" });
//以上都是静态方法，调用一次就关闭数据库连接了
//如果想一个数据库连接做多次增删改查可以用实例方法
//静态方法和实例方法的区别就是前者调用一次就关闭数据库连接，后者是用 using()关闭数据库连接
//所有静态方法都有对应的实例方法，实例方法的命名就是后面加了一个s
using (DB db = new DB())
{
    //注意静态方法是Insert()，对应的实例方法是 Inserts() 多一个s
    db.Inserts(new Test_Main() { ID = 1, MainName = "aa" });
    db.Updates(new Test_Main() { MainName = "bb" }, "ID=@ID", new { ID = 3 });
    List<Test_Main> list7 = db.Selects<Test_Main>().Query();
}
//事务
using (DB db = new DB())
{
    try
    {
        db.BeginTransaction();//开始事务
        db.Inserts(new Test_Main() { ID = 1, MainName = "aa" });
        db.Updates(new Test_Main() { MainName = "bb" }, "ID=@ID", new { ID = 3 });
        db.Commit();//提交事务
    }
    catch { db.Rollback(); }//出错回滚事务
}
sql传参的两种方式
1.静态DB对象 DB.Query(sql, new { ID = 1, MainName = "aa" });
2.非静态的DB对象
using (DB db = new DB())
{
    db.AddParameter("@ID", "1");//第一种
    db.Query(sql, new { ID = 1, MainName = "aa" });//第二种
}
3.SqlBuilder 查询构造器 传参
SqlBuilder sql= DB.Select<Test_Main>(),Where("ID=@ID and MainName=@MainName");
sql.AddParameter("@ID", "1");//第一种
sql.Query(new {MainName="aa"});//第二种